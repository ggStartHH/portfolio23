import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup
from tocken import tok

bot = telebot.TeleBot(tok)
user_search_results = {}



bot_info = (
    "üéµ **–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞, –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏.**\n\n"
    "üîç **–ö–æ–º–∞–Ω–¥—ã:**\n"
    "/start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
    "/search - –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏\n"
    "/mylike - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏\n"
    "/info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ \n"
    "üì• **–°–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é –º–æ–∂–Ω–æ –≤ /mylist** \n"
    "üö® **–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç—Ä–µ–∫–∞–º–∏:** –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ –ø–µ—Å–Ω–∏ –±–æ—Ç –ø—Ä–∏—Å–ª–∞–ª json —Ñ–∞–π–ª, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –±–æ—Ç–∞.\n"
    "üÜì **–ë–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!** –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ‚Ññ‚Ññ‚Ññ.\n"
)

class Album:
    def __init__(self, title, link):
        self.title = title
        self.link = link
        self.tracks = []

class Track:
    def __init__(self, title, link):
        self.title = title
        self.link = link

albums = []

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton('–ü–æ–∏—Å–∫üîé', callback_data='search')
    btn2 = types.InlineKeyboardButton('Info‚ùì', callback_data='info')
    markup.add(btn1, btn2)
    bot.send_photo(message.chat.id, open(r'D:\aio\print1.png', 'rb'), reply_markup=markup)

@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id, bot_info)

@bot.callback_query_handler(func=lambda call: call.data == 'info')
def process_search_query(call):
    bot.send_message(call.message.chat.id, bot_info)


@bot.message_handler(commands=['search'])
def handle_search_command(message):
    user_search_results[message.chat.id] = {'query': None, 'results': []}
    bot.send_message(message.chat.id, "...")
    bot.register_next_step_handler(message, search_query)

def search_query(message):
    chat_id = message.chat.id
    query = message.text.strip()

    user_search_results[chat_id]['query'] = query
    user_search_results[chat_id]['results'] = search_muzyet(query)

    if user_search_results[chat_id]['results']:
        send_search_results(chat_id)
    else:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'search')
def process_search_query(call):
    user_search_results[call.message.chat.id] = {'query': None, 'results': []}
    bot.send_message(call.message.chat.id, "...")
    bot.register_next_step_handler(call.message, search_query)


liked_songs = {}

@bot.callback_query_handler(func=lambda call: call.data.startswith('like_'))
def handle_like_callback(call):
    chat_id = call.message.chat.id
    song_index = int(call.data.split('_')[1])

    if chat_id in user_search_results and user_search_results[chat_id]['results']:
        selected_song = user_search_results[chat_id]['results'][song_index - 1]
        track_title = selected_song['title']
        track_link = selected_song['link']

        # Add the liked track information to the dictionary for this user
        liked_songs.setdefault(chat_id, []).append({'title': track_title, 'link': track_link})

        bot.send_message(chat_id, f"–í—ã –ª–∞–π–∫–Ω—É–ª–∏ –ø–µ—Å–Ω—é: {track_title}")
    else:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")



def send_search_results(chat_id):
    results = user_search_results[chat_id]['results']
    markup = types.InlineKeyboardMarkup(row_width=2)

    for index, result in enumerate(results[:15], start=1):
        btn_text = f"{index}. {result['title']}"
        btn = types.InlineKeyboardButton(text=btn_text, callback_data=f'song_{index}')
        like_btn = types.InlineKeyboardButton(text='Like ‚ù§Ô∏è', callback_data=f'like_{index}')
        markup.add(btn, like_btn)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é:", reply_markup=markup)

@bot.message_handler(commands=['mylike'])
def show_liked_songs(message):
    chat_id = message.chat.id

    if chat_id in liked_songs and liked_songs[chat_id]:
        for song in liked_songs[chat_id]:
            title = song.get('title', '').strip()
            link = song.get('link').strip()
            
            # Create a clickable link with the text "–°–∫–∞—á–∞—Ç—å"
            message_text = f"{title}\n[–°–∫–∞—á–∞—Ç—å]({link})"
            
            # Send the message with Markdown formatting
            bot.send_message(chat_id, message_text, parse_mode='Markdown')
    else:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤.")



@bot.callback_query_handler(func=lambda call: call.data.startswith('song_'))
def handle_song_callback(call):
    chat_id = call.message.chat.id
    song_index = int(call.data.split('_')[1])

    if chat_id in user_search_results and user_search_results[chat_id]['results']:
        selected_song = user_search_results[chat_id]['results'][song_index - 1]
        audio_link = selected_song['link']
        track_title = selected_song['title']

        bot.send_audio(chat_id, audio_link, title=track_title, performer="")
    else:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

def search_muzyet(query):
    try:
        base_url = f'https://muzyet.net/search/{query}'
        response = requests.get(base_url)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')
        results = soup.find_all('div', class_='list lista_play song_list')

        search_results = []
        for result in results[:15]:
            titles = result.find_all('span', class_='artist_name')
            links = result.find_all('div', class_='right')

            for title, link in zip(titles, links):
                title_text = title.text.strip()
                link_data_id = link.get('data-id').strip()
                search_results.append({'title': title_text, 'link': link_data_id})

        return search_results  # –í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π

    except requests.exceptions.RequestException as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        return None

if __name__ == "__main__":
    bot.polling(none_stop=True)
